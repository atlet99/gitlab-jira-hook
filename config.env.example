# =============================================================================
# GitLab ↔ Jira Cloud Webhook Configuration
# =============================================================================

# Server Configuration
# -----------------------------------------------------------------------------
# Port for the webhook server to listen on
PORT=8080

# Log level: debug, info, warn, error
# Use debug for development, info for production
LOG_LEVEL=info

# Timezone for date formatting and container (e.g., Etc/GMT-5, Asia/Almaty, UTC)
# This affects all date/time output in logs, Jira comments, and container time
TIMEZONE=Etc/GMT-5

# GitLab Configuration
# -----------------------------------------------------------------------------
# Secret token for validating GitLab webhook requests
# Must match the token configured in GitLab webhook settings
GITLAB_SECRET=your-gitlab-secret-token

# Base URL of your GitLab instance
# For gitlab.com use: https://gitlab.com
# For self-hosted GitLab use your instance URL
GITLAB_BASE_URL=https://gitlab.com

# GitLab API token for creating/updating issues and finding users
# Generate at: GitLab Settings > Access Tokens
# Required scopes: api, read_user, read_repository
GITLAB_API_TOKEN=your-gitlab-personal-access-token

# Default GitLab namespace for Jira projects
# Jira projects will be mapped to {namespace}/{project-key} by default
GITLAB_NAMESPACE=jira-sync

# Explicit project mappings (optional)
# Format: JIRA_KEY1=gitlab/project1,JIRA_KEY2=group/project2
# Example: CORE=platform/core-services,UI=frontend/user-interface
# Leave empty to use default namespace convention only
PROJECT_MAPPINGS=

# Event Filtering (Optional)
# -----------------------------------------------------------------------------
# Comma-separated list of allowed GitLab projects
# Format: group/project,another-group/another-project
# Leave empty to allow all projects
ALLOWED_PROJECTS=my-org/my-project,another-org/another-project

# Comma-separated list of allowed GitLab groups
# Format: group1,group2,group3
# Leave empty to allow all groups
ALLOWED_GROUPS=my-org,another-org

# Push event branch filter (comma-separated, supports * and ? wildcards)
# Examples:
#   main,develop                    # Only main and develop branches
#   main,release-*                  # Main and all release branches
#   main,develop,hotfix/*           # Main, develop, and all hotfix branches
#   *                               # All branches (default behavior)
#   main,release-*,hotfix/*,feature/??-*  # Complex patterns
# Leave empty to allow all branches
PUSH_BRANCH_FILTER=main,release-*,hotfix/*

# JQL Filter Configuration
# -----------------------------------------------------------------------------
# JQL filter to determine which events to process
# If set, only events that match the JQL filter will be processed
# If not set, all events will be processed
# Example: JQL_FILTER=project = "TEST" AND issuetype = Bug
JQL_FILTER=

# Jira Configuration
# -----------------------------------------------------------------------------
# Email address associated with your Jira account
JIRA_EMAIL=your-email@company.com

# API token for Jira authentication
# Generate at: https://id.atlassian.com/manage-profile/security/api-tokens
JIRA_TOKEN=your-jira-api-token

# Base URL of your Jira Cloud instance
# Format: https://yourcompany.atlassian.net
JIRA_BASE_URL=https://yourcompany.atlassian.net

# Secret for validating incoming Jira webhook requests (optional)
# Used for HMAC signature validation or JWT token verification
# Configure this in your Jira webhook settings for security
JIRA_WEBHOOK_SECRET=your-jira-webhook-secret

# JWT Configuration for Connect Apps (optional)
# -----------------------------------------------------------------------------
# Enable JWT validation for Jira Connect apps
# Set to true when using Jira Connect apps instead of basic auth
JWT_ENABLED=false

# Expected audience for JWT tokens from Jira Connect apps
# Required when JWT_ENABLED=true
# Should match your webhook endpoint URL
JWT_EXPECTED_AUDIENCE=https://your-app.com/webhook

# Comma-separated list of allowed Jira Connect app client keys
# Required when JWT_ENABLED=true
# Get these from your Jira Connect app configuration
JWT_ALLOWED_ISSUERS=client-key-1,client-key-2

# Rate limiting for Jira API calls (requests per second)
# Recommended: 10 for most cases, adjust based on your Jira plan
JIRA_RATE_LIMIT=10

# Maximum number of retry attempts for failed Jira API calls
JIRA_RETRY_MAX_ATTEMPTS=3

# Base delay between retry attempts in milliseconds
# Will be exponentially increased for each retry
JIRA_RETRY_BASE_DELAY_MS=200

# Jira Authentication Method Configuration
# -----------------------------------------------------------------------------
# Authentication method to use for Jira API: "basic" or "oauth2"
# Default: "basic" (backward compatibility)
# For production deployments, "oauth2" is recommended for enhanced security
JIRA_AUTH_METHOD=basic

# Jira OAuth 2.0 Configuration (required when JIRA_AUTH_METHOD=oauth2)
# -----------------------------------------------------------------------------
# OAuth 2.0 Client ID from your Jira app configuration
# Get this from: Jira Settings > Apps > OAuth 2.0 (3LO)
JIRA_OAUTH2_CLIENT_ID=your-oauth2-client-id

# OAuth 2.0 Client Secret from your Jira app configuration
# Keep this secret secure - never commit to version control
JIRA_OAUTH2_CLIENT_SECRET=your-oauth2-client-secret

# OAuth 2.0 scope defining permissions for Jira access
# Common scopes: "read:jira-work write:jira-work" for basic operations
# For webhook handling: "read:jira-work write:jira-work manage:jira-webhook"
JIRA_OAUTH2_SCOPE="read:jira-work write:jira-work"

# OAuth 2.0 Token endpoint URL for your Jira instance
# Format: https://auth.atlassian.com/oauth/token
JIRA_OAUTH2_TOKEN_URL=https://auth.atlassian.com/oauth/token

# OAuth 2.0 Authorization endpoint URL for your Jira instance
# Format: https://auth.atlassian.com/authorize
JIRA_OAUTH2_AUTH_URL=https://auth.atlassian.com/authorize

# OAuth 2.0 Redirect URL configured in your Jira app
# This should match the redirect URL in your app configuration
# Format: https://your-app-domain.com/auth/jira/callback
JIRA_OAUTH2_REDIRECT_URL=https://your-app-domain.com/auth/jira/callback

# OAuth 2.0 Token Storage (managed automatically by the application)
# -----------------------------------------------------------------------------
# Current OAuth 2.0 access token (auto-managed, don't set manually)
JIRA_ACCESS_TOKEN=

# OAuth 2.0 refresh token (auto-managed, don't set manually)
JIRA_REFRESH_TOKEN=

# Token expiry timestamp in Unix seconds (auto-managed, don't set manually)
JIRA_TOKEN_EXPIRY=

# =============================================================================
# Queue and Throughput Configuration
# =============================================================================

# Legacy Worker Pool Configuration (for backward compatibility)
# -----------------------------------------------------------------------------
# Number of workers in the pool (legacy, use MIN_WORKERS/MAX_WORKERS instead)
WORKER_POOL_SIZE=10

# Size of the job queue (legacy, use new queue configuration instead)
JOB_QUEUE_SIZE=100

# New Priority Queue Configuration
# -----------------------------------------------------------------------------
# Minimum number of workers in the pool
MIN_WORKERS=2

# Maximum number of workers in the pool
MAX_WORKERS=32

# Queue length above which the pool will scale up
SCALE_UP_THRESHOLD=10

# Queue length below which the pool will scale down
SCALE_DOWN_THRESHOLD=2

# Interval (in seconds) between scaling checks
SCALE_INTERVAL=10

# Rate Limiting and Throughput
# -----------------------------------------------------------------------------
# Maximum concurrent jobs processing
MAX_CONCURRENT_JOBS=50

# Timeout for individual job processing (seconds)
JOB_TIMEOUT_SECONDS=120

# Timeout for queue operations (milliseconds)
QUEUE_TIMEOUT_MS=5000

# Retry and Backoff Configuration
# -----------------------------------------------------------------------------
# Maximum retry attempts for failed jobs
MAX_RETRIES=3

# Base delay between retries (milliseconds)
RETRY_DELAY_MS=1000

# Exponential backoff multiplier
BACKOFF_MULTIPLIER=2.0

# Maximum backoff delay (milliseconds)
MAX_BACKOFF_MS=30000

# Monitoring and Health
# -----------------------------------------------------------------------------
# Enable metrics collection
METRICS_ENABLED=true

# Health check interval (seconds)
HEALTH_CHECK_INTERVAL=30

# Debug Configuration
# -----------------------------------------------------------------------------
# Enable debug mode for detailed webhook logging
# Shows all incoming webhook data, headers, and parsed event information
# Use only for development and troubleshooting
DEBUG_MODE=false

# =============================================================================
# Bidirectional Sync Configuration
# =============================================================================

# The service now supports bidirectional synchronization between Jira and GitLab:
# 
# Jira → GitLab (via Jira webhooks on /jira-webhook endpoint):
# - Automatic GitLab issue creation from Jira issues
# - Real-time user assignment based on email matching
# - Project mapping via GITLAB_NAMESPACE and PROJECT_MAPPINGS
# - Status synchronization via GitLab labels
# - Comment and worklog synchronization
#
# GitLab → Jira (via GitLab webhooks on /gitlab-hook endpoint):  
# - Jira comment creation from GitLab commits, issues, merge requests
# - Automatic issue ID extraction from commit messages
# - Rich formatted comments with links back to GitLab
#
# Required for bidirectional sync:
# - GITLAB_API_TOKEN: For creating GitLab issues and finding users
# - JIRA_WEBHOOK_SECRET: For validating incoming Jira webhooks  
# - PROJECT_MAPPINGS or GITLAB_NAMESPACE: For project routing

# Bidirectional Sync Control
# -----------------------------------------------------------------------------
# Enable bidirectional synchronization (Jira → GitLab)
BIDIRECTIONAL_ENABLED=false

# List of Jira events to process (comma-separated)
# Available events: issue_created, issue_updated, issue_deleted, 
#                  comment_created, comment_updated, comment_deleted,
#                  worklog_created, worklog_updated, worklog_deleted
BIDIRECTIONAL_EVENTS=issue_created,issue_updated,comment_created

# Sync interval in seconds (how often to check for sync operations)
BIDIRECTIONAL_SYNC_INTERVAL=30

# Conflict resolution strategy: last_write_wins, merge, manual
BIDIRECTIONAL_CONFLICT_STRATEGY=last_write_wins

# Status Mapping (Jira → GitLab)
# -----------------------------------------------------------------------------
# Enable status synchronization using GitLab labels
STATUS_MAPPING_ENABLED=false

# Map Jira statuses to GitLab labels (comma-separated key=value pairs)
# Example: "To Do=todo,In Progress=in-progress,Done=done"
STATUS_MAPPING="To Do=todo,In Progress=in-progress,Done=done,Blocked=blocked"

# Default GitLab label when Jira status has no mapping
DEFAULT_GITLAB_LABEL=external-sync

# Comment Synchronization
# -----------------------------------------------------------------------------
# Enable comment synchronization
COMMENT_SYNC_ENABLED=false

# Sync direction: jira_to_gitlab, gitlab_to_jira, bidirectional
COMMENT_SYNC_DIRECTION=jira_to_gitlab

# Template for Jira → GitLab comments (use {content} placeholder)
COMMENT_TEMPLATE_JIRA_TO_GITLAB="**From Jira**: {content}"

# Template for GitLab → Jira comments (use {content} placeholder)  
COMMENT_TEMPLATE_GITLAB_TO_JIRA="**From GitLab**: {content}"

# Assignee Synchronization
# -----------------------------------------------------------------------------
# Enable assignee synchronization
ASSIGNEE_SYNC_ENABLED=false

# Map Jira users to GitLab users (comma-separated email=username pairs)
# Example: "john.doe@company.com=jdoe,jane.smith@company.com=jsmith"
USER_MAPPING="john.doe@company.com=jdoe,jane.smith@company.com=jsmith"

# Default GitLab assignee when Jira user has no mapping
DEFAULT_GITLAB_ASSIGNEE=""

# Sync Limits and Safety
# -----------------------------------------------------------------------------
# Maximum number of sync operations per batch
SYNC_BATCH_SIZE=10

# Maximum sync operations per minute (rate limiting)
SYNC_RATE_LIMIT=60

# Number of retry attempts for failed sync operations
SYNC_RETRY_ATTEMPTS=3

# Skip events older than specified duration
SKIP_OLD_EVENTS=true

# Maximum event age in hours to process (when SKIP_OLD_EVENTS=true)
MAX_EVENT_AGE=24

# =============================================================================
# Configuration Examples
# =============================================================================

# Example 1: Basic setup for gitlab.com and Jira Cloud
# PORT=8080
# TIMEZONE=Etc/GMT-5
# GITLAB_SECRET=my-secret-token
# GITLAB_BASE_URL=https://gitlab.com
# GITLAB_API_TOKEN=glpat-xxxxxxxxxxxxxxxxxxxx
# GITLAB_NAMESPACE=jira-sync
# JIRA_EMAIL=john.doe@company.com
# JIRA_TOKEN=my-jira-api-token
# JIRA_BASE_URL=https://mycompany.atlassian.net
# JIRA_WEBHOOK_SECRET=jira-webhook-secret
# LOG_LEVEL=info
# DEBUG_MODE=false

# Example 2: Self-hosted GitLab with filtering and high throughput
# PORT=8080
# TIMEZONE=Asia/Almaty
# GITLAB_SECRET=my-secret-token
# GITLAB_BASE_URL=https://gitlab.mycompany.com
# GITLAB_API_TOKEN=glpat-xxxxxxxxxxxxxxxxxxxx
# GITLAB_NAMESPACE=engineering
# PROJECT_MAPPINGS=CORE=platform/core-services,UI=frontend/user-interface
# JIRA_EMAIL=john.doe@company.com
# JIRA_TOKEN=my-jira-api-token
# JIRA_BASE_URL=https://mycompany.atlassian.net
# JIRA_WEBHOOK_SECRET=jira-webhook-secret
# ALLOWED_PROJECTS=engineering/backend,engineering/frontend
# ALLOWED_GROUPS=engineering,qa
# PUSH_BRANCH_FILTER=main,develop,release-*
# MIN_WORKERS=5
# MAX_WORKERS=50
# MAX_CONCURRENT_JOBS=100
# LOG_LEVEL=info

# Example 3: Production setup with strict filtering and monitoring
# PORT=8080
# TIMEZONE=UTC
# GITLAB_SECRET=production-secret-token
# GITLAB_BASE_URL=https://gitlab.com
# GITLAB_API_TOKEN=glpat-production-token-xxxx
# GITLAB_NAMESPACE=production
# PROJECT_MAPPINGS=PROD=company/production-app,STAGE=company/staging-app
# JIRA_EMAIL=webhook@company.com
# JIRA_TOKEN=production-jira-token
# JIRA_BASE_URL=https://company.atlassian.net
# JIRA_WEBHOOK_SECRET=production-webhook-secret
# JIRA_RATE_LIMIT=5
# JIRA_RETRY_MAX_ATTEMPTS=5
# JIRA_RETRY_BASE_DELAY_MS=500
# ALLOWED_PROJECTS=company/production-app
# PUSH_BRANCH_FILTER=main,hotfix/*
# MIN_WORKERS=10
# MAX_WORKERS=100
# MAX_CONCURRENT_JOBS=200
# METRICS_ENABLED=true
# HEALTH_CHECK_INTERVAL=15
# LOG_LEVEL=warn

# Example 4: High-load environment with aggressive scaling
# PORT=8080
# TIMEZONE=Etc/GMT-5
# GITLAB_SECRET=highload-secret-token
# GITLAB_BASE_URL=https://gitlab.com
# GITLAB_API_TOKEN=glpat-highload-token-xxxx
# GITLAB_NAMESPACE=highload
# JIRA_EMAIL=webhook@company.com
# JIRA_TOKEN=highload-jira-token
# JIRA_BASE_URL=https://company.atlassian.net
# JIRA_WEBHOOK_SECRET=highload-webhook-secret
# JIRA_RATE_LIMIT=20
# MIN_WORKERS=20
# MAX_WORKERS=200
# SCALE_UP_THRESHOLD=5
# SCALE_DOWN_THRESHOLD=1
# SCALE_INTERVAL=5
# MAX_CONCURRENT_JOBS=500
# JOB_TIMEOUT_SECONDS=120
# MAX_RETRIES=5
# RETRY_DELAY_MS=500
# BACKOFF_MULTIPLIER=1.5
# METRICS_ENABLED=true
# HEALTH_CHECK_INTERVAL=10
# LOG_LEVEL=info

# Example 5: Development setup with debug logging
# PORT=8080
# TIMEZONE=Etc/GMT-5
# GITLAB_SECRET=dev-secret-token
# GITLAB_BASE_URL=https://gitlab.com
# GITLAB_API_TOKEN=glpat-dev-token-xxxxxxxx
# GITLAB_NAMESPACE=dev
# PROJECT_MAPPINGS=TEST=dev/test-project,DEMO=dev/demo-project
# JIRA_EMAIL=dev@company.com
# JIRA_TOKEN=dev-jira-token
# JIRA_BASE_URL=https://company.atlassian.net
# JIRA_WEBHOOK_SECRET=dev-webhook-secret
# LOG_LEVEL=debug
# DEBUG_MODE=true
# ALLOWED_PROJECTS=dev/test-project
# MIN_WORKERS=2
# MAX_WORKERS=10
# METRICS_ENABLED=true
# HEALTH_CHECK_INTERVAL=30

# Example 6: Jira Connect Apps setup with JWT authentication
# PORT=8080
# TIMEZONE=Etc/GMT-5
# GITLAB_SECRET=connect-secret-token
# GITLAB_BASE_URL=https://gitlab.com
# GITLAB_API_TOKEN=glpat-connect-token-xxxxxxxx
# GITLAB_NAMESPACE=connect
# PROJECT_MAPPINGS=CONNECT=connect/jira-connect-project
# JIRA_BASE_URL=https://company.atlassian.net
# JIRA_WEBHOOK_SECRET=connect-webhook-secret
#
# JWT Configuration for Connect Apps
JWT_ENABLED=true
JWT_EXPECTED_AUDIENCE=https://your-app.com/jira-webhook
JWT_ALLOWED_ISSUERS=atlassian-connect-examples,my-connect-app
#
# JIRA_RATE_LIMIT=10
# JIRA_RETRY_MAX_ATTEMPTS=3
# JIRA_RETRY_BASE_DELAY_MS=200
# MIN_WORKERS=5
# MAX_WORKERS=50
# MAX_CONCURRENT_JOBS=100
# LOG_LEVEL=info
# METRICS_ENABLED=true
# HEALTH_CHECK_INTERVAL=30