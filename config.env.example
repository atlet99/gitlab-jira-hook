# =============================================================================
# GitLab â†” Jira Cloud Webhook Configuration
# =============================================================================

# Server Configuration
# -----------------------------------------------------------------------------
# Port for the webhook server to listen on
PORT=8080

# GitLab Configuration
# -----------------------------------------------------------------------------
# Secret token for validating GitLab webhook requests
# Must match the token configured in GitLab webhook settings
GITLAB_SECRET=your-gitlab-secret-token

# Base URL of your GitLab instance
# For gitlab.com use: https://gitlab.com
# For self-hosted GitLab use your instance URL
GITLAB_BASE_URL=https://gitlab.com

# Jira Configuration
# -----------------------------------------------------------------------------
# Email address associated with your Jira account
JIRA_EMAIL=your-email@company.com

# API token for Jira authentication
# Generate at: https://id.atlassian.com/manage-profile/security/api-tokens
JIRA_TOKEN=your-jira-api-token

# Base URL of your Jira Cloud instance
# Format: https://yourcompany.atlassian.net
JIRA_BASE_URL=https://yourcompany.atlassian.net

# Rate limiting for Jira API calls (requests per second)
# Recommended: 10 for most cases, adjust based on your Jira plan
JIRA_RATE_LIMIT=10

# Maximum number of retry attempts for failed Jira API calls
JIRA_RETRY_MAX_ATTEMPTS=3

# Base delay between retry attempts in milliseconds
# Will be exponentially increased for each retry
JIRA_RETRY_BASE_DELAY_MS=200

# Logging Configuration
# -----------------------------------------------------------------------------
# Log level: debug, info, warn, error
# Use debug for development, info for production
LOG_LEVEL=info

# Event Filtering (Optional)
# -----------------------------------------------------------------------------
# Comma-separated list of allowed GitLab projects
# Format: group/project,another-group/another-project
# Leave empty to allow all projects
ALLOWED_PROJECTS=my-org/my-project,another-org/another-project

# Comma-separated list of allowed GitLab groups
# Format: group1,group2,group3
# Leave empty to allow all groups
ALLOWED_GROUPS=my-org,another-org

# Push event branch filter (comma-separated, supports * and ? wildcards)
# Examples:
#   main,develop                    # Only main and develop branches
#   main,release-*                  # Main and all release branches
#   main,develop,hotfix/*           # Main, develop, and all hotfix branches
#   *                               # All branches (default behavior)
#   main,release-*,hotfix/*,feature/??-*  # Complex patterns
# Leave empty to allow all branches
PUSH_BRANCH_FILTER=main,release-*,hotfix/*

# =============================================================================
# Configuration Examples
# =============================================================================

# Example 1: Basic setup for gitlab.com and Jira Cloud
# PORT=8080
# GITLAB_SECRET=my-secret-token
# GITLAB_BASE_URL=https://gitlab.com
# JIRA_EMAIL=john.doe@company.com
# JIRA_TOKEN=my-jira-api-token
# JIRA_BASE_URL=https://mycompany.atlassian.net
# LOG_LEVEL=info

# Example 2: Self-hosted GitLab with filtering
# PORT=8080
# GITLAB_SECRET=my-secret-token
# GITLAB_BASE_URL=https://gitlab.mycompany.com
# JIRA_EMAIL=john.doe@company.com
# JIRA_TOKEN=my-jira-api-token
# JIRA_BASE_URL=https://mycompany.atlassian.net
# ALLOWED_PROJECTS=engineering/backend,engineering/frontend
# ALLOWED_GROUPS=engineering,qa
# PUSH_BRANCH_FILTER=main,develop,release-*
# LOG_LEVEL=info

# Example 3: Production setup with strict filtering
# PORT=8080
# GITLAB_SECRET=production-secret-token
# GITLAB_BASE_URL=https://gitlab.com
# JIRA_EMAIL=webhook@company.com
# JIRA_TOKEN=production-jira-token
# JIRA_BASE_URL=https://company.atlassian.net
# JIRA_RATE_LIMIT=5
# JIRA_RETRY_MAX_ATTEMPTS=5
# JIRA_RETRY_BASE_DELAY_MS=500
# ALLOWED_PROJECTS=company/production-app
# PUSH_BRANCH_FILTER=main,hotfix/*
# LOG_LEVEL=warn 